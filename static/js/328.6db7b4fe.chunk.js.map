{"version":3,"file":"static/js/328.6db7b4fe.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style-type: none;\n  padding: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n`;\n\nexport const CastListItem = styled.li`\n  background-color: #fff;\n  border-radius: 4px;\n  margin-bottom: 30px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const CastPhoto = styled.img`\n  width: 300px;\n  height: 400px;\n  object-fit: cover;\n`;\n\nexport const CastInfo = styled.div`\n  padding: 10px;\n  margin: 0;\n`;\n\nexport const CastInfoName = styled.p`\n  font-weight: bold;\n  margin: 0;\n  margin-bottom: 8px;\n  font-size: 22px;\n`;\n\nexport const CastInfoChar = styled.p`\n  margin: 0;\n  font-size: 14px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/api';\nimport { Loader } from '../../components/Loader';\nimport placeholder from 'images/avatar_placeholder.jpg';\n\nimport {\n  CastList,\n  CastListItem,\n  CastPhoto,\n  CastInfo,\n  CastInfoName,\n  CastInfoChar,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getMovieCast(movieId)\n      .then(movieData => {\n        setCast(movieData);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div>\n      <CastList>\n        {cast.map(({ name, character, id, profile_path }) => (\n          <CastListItem key={id}>\n            <CastPhoto\n              src={profile_path || placeholder}\n              alt={profile_path ? name : 'Placeholder'}\n            />\n            <CastInfo>\n              <CastInfoName>{name}</CastInfoName>\n              <CastInfoChar>{character}</CastInfoChar>\n            </CastInfo>\n          </CastListItem>\n        ))}\n      </CastList>\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzNjZmMjc2MjcyMDY2NzE4Y2YyYjBhNzI4MjFlYmEwNyIsInN1YiI6IjY0YmFlZTFhNDM1MDExMDBjNzExMGNmYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.MZ8vGlAMFv2BTCJshD8dcZDS5gvT7sILLLCriDcF-Uc';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst API_PATHS = {\n  trendingMovies: 'trending/movie/day',\n  searchMovie: 'search/movie',\n  movieDetails: 'movie',\n  movieCast: 'credits',\n  movieReviews: 'reviews',\n};\n\nexport const fetchData = async path => {\n  try {\n    const response = await axios.get(`${BASE_URL}` + path, {\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer ' + API_KEY,\n      },\n    });\n    if (response.status === 200) {\n      return response.data;\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n  }\n};\n\nexport const getTrendingMovies = async () => {\n  const movies = await fetchData(`${API_PATHS.trendingMovies}`);\n  return movies.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const movies = await fetchData(`${API_PATHS.searchMovie}?query=${query}`);\n  return movies.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const movie = await fetchData(`${API_PATHS.movieDetails}/${movieId}`);\n\n  if (movie.poster_path) {\n    movie.poster_path = `http://image.tmdb.org/t/p/w300${movie.poster_path}`;\n  }\n\n  return movie;\n};\n\nexport const getMovieCast = async movieId => {\n  const cast = await fetchData(\n    `${API_PATHS.movieDetails}/${movieId}/${API_PATHS.movieCast}`\n  );\n\n  return cast.cast.map(cast => {\n    if (cast.profile_path) {\n      cast.profile_path = `http://image.tmdb.org/t/p/w200${cast.profile_path}`;\n    }\n\n    return cast;\n  });\n};\n\nexport const getMovieReviews = async movieId => {\n  const reviews = await fetchData(\n    `${API_PATHS.movieDetails}/${movieId}/${API_PATHS.movieReviews}`\n  );\n\n  return reviews.results.map(review => {\n    if (review.author_details.avatar_path) {\n      review.author_details.avatar_path = `http://image.tmdb.org/t/p/w200${review.author_details.avatar_path}`;\n    }\n    return review;\n  });\n};\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastListItem","_templateObject2","CastPhoto","_templateObject3","CastInfo","_templateObject4","CastInfoName","_templateObject5","CastInfoChar","_templateObject6","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","getMovieCast","then","movieData","finally","_jsx","Loader","children","map","_ref","name","character","id","profile_path","_jsxs","src","placeholder","alt","axios","API_PATHS","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","path","response","_context","prev","next","concat","headers","accept","Authorization","sent","status","abrupt","data","t0","console","error","stop","_x","apply","arguments","getTrendingMovies","_ref2","_callee2","movies","_context2","results","getMoviesByQuery","_ref3","_callee3","query","_context3","_x2","getMovieDetails","_ref4","_callee4","movie","_context4","poster_path","_x3","_ref5","_callee5","_context5","_x4","getMovieReviews","_ref6","_callee6","reviews","_context6","review","author_details","avatar_path","_x5"],"sourceRoot":""}